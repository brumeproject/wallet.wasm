/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_x25519sharedsecret_free(a: number, b: number): void;
export function x25519sharedsecret_to_bytes(a: number): number;
export function x25519sharedsecret_was_contributory(a: number): number;
export function __wbg_x25519publickey_free(a: number, b: number): void;
export function x25519publickey_from_bytes(a: number, b: number): void;
export function x25519publickey_to_bytes(a: number): number;
export function x25519staticsecret_random(): number;
export function x25519staticsecret_from_bytes(a: number, b: number): void;
export function x25519staticsecret_to_bytes(a: number): number;
export function x25519staticsecret_diffie_hellman(a: number, b: number): number;
export function x25519staticsecret_to_public(a: number): number;
export function x25519publickey_new(a: number, b: number): void;
export function __wbg_x25519staticsecret_free(a: number, b: number): void;
export function sha1(a: number): number;
export function __wbg_sha1hasher_free(a: number, b: number): void;
export function sha1hasher_new(): number;
export function sha1hasher_clone(a: number): number;
export function sha1hasher_update(a: number, b: number): void;
export function sha1hasher_finalize(a: number): number;
export function __wbg_secp256k1signatureandrecovery_free(a: number, b: number): void;
export function secp256k1signatureandrecovery_to_bytes(a: number): number;
export function __wbg_secp256k1verifyingkey_free(a: number, b: number): void;
export function secp256k1verifyingkey_from_sec1_bytes(a: number, b: number): void;
export function secp256k1verifyingkey_recover_from_prehash(a: number, b: number, c: number): void;
export function secp256k1verifyingkey_to_sec1_compressed_bytes(a: number): number;
export function secp256k1verifyingkey_to_sec1_uncompressed_bytes(a: number): number;
export function __wbg_secp256k1signingkey_free(a: number, b: number): void;
export function secp256k1signingkey_new(): number;
export function secp256k1signingkey_from_bytes(a: number, b: number): void;
export function secp256k1signingkey_to_bytes(a: number): number;
export function secp256k1signingkey_verifying_key(a: number): number;
export function secp256k1signingkey_sign_prehash_recoverable(a: number, b: number, c: number): void;
export function secp256k1signingkey_random(): number;
export function ripemd160(a: number): number;
export function __wbg_ripemd160hasher_free(a: number, b: number): void;
export function ripemd160hasher_new(): number;
export function ripemd160hasher_clone(a: number): number;
export function ripemd160hasher_update(a: number, b: number): void;
export function ripemd160hasher_finalize(a: number): number;
export function __wbg_networksecret_free(a: number, b: number): void;
export function networksecret_to_secret(a: number): number;
export function networksecret_to_proof(a: number): number;
export function networksecret_to_value(a: number): number;
export function __wbg_networkmixin_free(a: number, b: number): void;
export function networkmixin_new(a: number, b: number, c: number, d: number): number;
export function networkmixin_generate(a: number, b: number): number;
export function networkmixin_verify_secret(a: number, b: number): number;
export function networkmixin_verify_proof(a: number, b: number): number;
export function keccak256(a: number): number;
export function __wbg_keccak256hasher_free(a: number, b: number): void;
export function keccak256hasher_new(): number;
export function keccak256hasher_clone(a: number): number;
export function keccak256hasher_update(a: number, b: number): void;
export function keccak256hasher_finalize(a: number): number;
export function __wbg_ed25519signature_free(a: number, b: number): void;
export function ed25519signature_from_bytes(a: number, b: number): void;
export function ed25519signature_to_bytes(a: number): number;
export function ed25519signature_r_bytes(a: number): number;
export function ed25519signature_s_bytes(a: number): number;
export function ed25519signature_new(a: number, b: number): void;
export function __wbg_ed25519signingkey_free(a: number, b: number): void;
export function ed25519signingkey_new(): number;
export function ed25519signingkey_from_bytes(a: number, b: number): void;
export function ed25519signingkey_from_keypair_bytes(a: number, b: number): void;
export function ed25519signingkey_to_bytes(a: number): number;
export function ed25519signingkey_to_keypair_bytes(a: number): number;
export function ed25519signingkey_verifying_key(a: number): number;
export function ed25519signingkey_sign(a: number, b: number): number;
export function ed25519signingkey_verify(a: number, b: number, c: number): number;
export function ed25519signingkey_verify_strict(a: number, b: number, c: number): number;
export function ed25519signingkey_random(): number;
export function __wbg_ed25519verifyingkey_free(a: number, b: number): void;
export function ed25519verifyingkey_from_bytes(a: number, b: number): void;
export function ed25519verifyingkey_is_weak(a: number): number;
export function ed25519verifyingkey_to_bytes(a: number): number;
export function ed25519verifyingkey_verify(a: number, b: number, c: number): number;
export function ed25519verifyingkey_verify_strict(a: number, b: number, c: number): number;
export function ed25519verifyingkey_new(a: number, b: number): void;
export function __wbg_chacha20poly1305cipher_free(a: number, b: number): void;
export function chacha20poly1305cipher_new(a: number, b: number): void;
export function chacha20poly1305cipher_encrypt(a: number, b: number, c: number, d: number): void;
export function chacha20poly1305cipher_decrypt(a: number, b: number, c: number, d: number): void;
export function base64_encode_padded(a: number, b: number): void;
export function base64_decode_padded(a: number, b: number, c: number): void;
export function base64_encode_unpadded(a: number, b: number): void;
export function base64_decode_unpadded(a: number, b: number, c: number): void;
export function base64url_encode_padded(a: number, b: number): void;
export function base64url_decode_padded(a: number, b: number, c: number): void;
export function base64url_encode_unpadded(a: number, b: number): void;
export function base64url_decode_unpadded(a: number, b: number, c: number): void;
export function base58_encode(a: number, b: number): void;
export function base58_decode(a: number, b: number, c: number): void;
export function base16_encode_lower(a: number, b: number): void;
export function base16_encode_upper(a: number, b: number): void;
export function base16_decode_mixed(a: number, b: number, c: number): void;
export function base16_decode_lower(a: number, b: number, c: number): void;
export function base16_decode_upper(a: number, b: number, c: number): void;
export function __wbg_memory_free(a: number, b: number): void;
export function memory_new(a: number, b: number): number;
export function memory_ptr(a: number): number;
export function memory_len(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
