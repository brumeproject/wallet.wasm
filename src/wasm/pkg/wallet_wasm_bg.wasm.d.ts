/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_x25519staticsecret_free: (a: number, b: number) => void;
export const x25519staticsecret_random: () => number;
export const x25519staticsecret_from_bytes: (a: number) => [number, number, number];
export const x25519staticsecret_to_bytes: (a: number) => number;
export const x25519staticsecret_diffie_hellman: (a: number, b: number) => number;
export const x25519staticsecret_to_public: (a: number) => number;
export const __wbg_x25519sharedsecret_free: (a: number, b: number) => void;
export const x25519sharedsecret_to_bytes: (a: number) => number;
export const x25519sharedsecret_was_contributory: (a: number) => number;
export const __wbg_x25519publickey_free: (a: number, b: number) => void;
export const x25519publickey_from_bytes: (a: number) => [number, number, number];
export const x25519publickey_to_bytes: (a: number) => number;
export const x25519publickey_new: (a: number) => [number, number, number];
export const sha1: (a: number) => number;
export const __wbg_sha1hasher_free: (a: number, b: number) => void;
export const sha1hasher_new: () => number;
export const sha1hasher_clone: (a: number) => number;
export const sha1hasher_update: (a: number, b: number) => void;
export const sha1hasher_finalize: (a: number) => number;
export const __wbg_secp256k1signatureandrecovery_free: (a: number, b: number) => void;
export const secp256k1signatureandrecovery_new: (a: number, b: number) => [number, number, number];
export const secp256k1signatureandrecovery_from_bytes: (a: number) => [number, number, number];
export const secp256k1signatureandrecovery_to_bytes: (a: number) => number;
export const __wbg_secp256k1signingkey_free: (a: number, b: number) => void;
export const secp256k1signingkey_new: () => number;
export const secp256k1signingkey_from_bytes: (a: number) => [number, number, number];
export const secp256k1signingkey_to_bytes: (a: number) => number;
export const secp256k1signingkey_verifying_key: (a: number) => number;
export const secp256k1signingkey_sign_prehash_recoverable: (a: number, b: number) => [number, number, number];
export const secp256k1signingkey_random: () => number;
export const __wbg_secp256k1verifyingkey_free: (a: number, b: number) => void;
export const secp256k1verifyingkey_from_sec1_bytes: (a: number) => [number, number, number];
export const secp256k1verifyingkey_recover_from_prehash: (a: number, b: number) => [number, number, number];
export const secp256k1verifyingkey_to_sec1_compressed_bytes: (a: number) => number;
export const secp256k1verifyingkey_to_sec1_uncompressed_bytes: (a: number) => number;
export const ripemd160: (a: number) => number;
export const __wbg_ripemd160hasher_free: (a: number, b: number) => void;
export const ripemd160hasher_new: () => number;
export const ripemd160hasher_clone: (a: number) => number;
export const ripemd160hasher_update: (a: number, b: number) => void;
export const ripemd160hasher_finalize: (a: number) => number;
export const __wbg_networksecret_free: (a: number, b: number) => void;
export const networksecret_to_secret: (a: number) => number;
export const networksecret_to_proof: (a: number) => number;
export const networksecret_to_value: (a: number) => number;
export const __wbg_networkmixin_free: (a: number, b: number) => void;
export const networkmixin_new: (a: number, b: number, c: number) => number;
export const networkmixin_generate: (a: number, b: number) => number;
export const networkmixin_verify_proof: (a: number, b: number) => number;
export const networkmixin_verify_secret: (a: number, b: number) => number;
export const networkmixin_verify_proofs: (a: number, b: number) => number;
export const networkmixin_verify_secrets: (a: number, b: number) => number;
export const keccak256: (a: number) => number;
export const __wbg_keccak256hasher_free: (a: number, b: number) => void;
export const keccak256hasher_new: () => number;
export const keccak256hasher_clone: (a: number) => number;
export const keccak256hasher_update: (a: number, b: number) => void;
export const keccak256hasher_finalize: (a: number) => number;
export const __wbg_ed25519signingkey_free: (a: number, b: number) => void;
export const ed25519signingkey_new: () => number;
export const ed25519signingkey_from_bytes: (a: number) => [number, number, number];
export const ed25519signingkey_from_keypair_bytes: (a: number) => [number, number, number];
export const ed25519signingkey_to_bytes: (a: number) => number;
export const ed25519signingkey_to_keypair_bytes: (a: number) => number;
export const ed25519signingkey_verifying_key: (a: number) => number;
export const ed25519signingkey_sign: (a: number, b: number) => number;
export const ed25519signingkey_verify: (a: number, b: number, c: number) => number;
export const ed25519signingkey_verify_strict: (a: number, b: number, c: number) => number;
export const ed25519signingkey_random: () => number;
export const __wbg_ed25519verifyingkey_free: (a: number, b: number) => void;
export const ed25519verifyingkey_from_bytes: (a: number) => [number, number, number];
export const ed25519verifyingkey_is_weak: (a: number) => number;
export const ed25519verifyingkey_to_bytes: (a: number) => number;
export const ed25519verifyingkey_verify: (a: number, b: number, c: number) => number;
export const ed25519verifyingkey_verify_strict: (a: number, b: number, c: number) => number;
export const ed25519verifyingkey_new: (a: number) => [number, number, number];
export const __wbg_ed25519signature_free: (a: number, b: number) => void;
export const ed25519signature_from_bytes: (a: number) => [number, number, number];
export const ed25519signature_to_bytes: (a: number) => number;
export const ed25519signature_r_bytes: (a: number) => number;
export const ed25519signature_s_bytes: (a: number) => number;
export const ed25519signature_new: (a: number) => [number, number, number];
export const __wbg_chacha20poly1305cipher_free: (a: number, b: number) => void;
export const chacha20poly1305cipher_new: (a: number) => [number, number, number];
export const chacha20poly1305cipher_encrypt: (a: number, b: number, c: number) => [number, number, number];
export const chacha20poly1305cipher_decrypt: (a: number, b: number, c: number) => [number, number, number];
export const __wbg_chacha20cipher_free: (a: number, b: number) => void;
export const chacha20cipher_new: (a: number, b: number) => [number, number, number];
export const chacha20cipher_seek: (a: number, b: number) => [number, number];
export const chacha20cipher_apply_keystream: (a: number, b: number) => [number, number];
export const base64_encode_padded: (a: number) => [number, number];
export const base64_decode_padded: (a: number, b: number) => [number, number, number];
export const base64_encode_unpadded: (a: number) => [number, number];
export const base64_decode_unpadded: (a: number, b: number) => [number, number, number];
export const base64url_encode_padded: (a: number) => [number, number];
export const base64url_decode_padded: (a: number, b: number) => [number, number, number];
export const base64url_encode_unpadded: (a: number) => [number, number];
export const base64url_decode_unpadded: (a: number, b: number) => [number, number, number];
export const base58_encode: (a: number) => [number, number];
export const base58_decode: (a: number, b: number) => [number, number, number];
export const base16_encode_lower: (a: number) => [number, number];
export const base16_encode_upper: (a: number) => [number, number];
export const base16_decode_mixed: (a: number, b: number) => [number, number, number];
export const base16_decode_lower: (a: number, b: number) => [number, number, number];
export const base16_decode_upper: (a: number, b: number) => [number, number, number];
export const __wbg_memory_free: (a: number, b: number) => void;
export const memory_new: (a: number, b: number) => number;
export const memory_ptr: (a: number) => number;
export const memory_len: (a: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_start: () => void;
